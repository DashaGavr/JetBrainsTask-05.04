//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.8
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from LexBasic.g4 by ANTLR 4.8

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.IO;
using System.Text;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.8")]
[System.CLSCompliant(false)]
public partial class XamlGrammarLexer : Lexer {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		T__0=1, T__1=2, T__2=3, T__3=4, COMMENT=5, SEA_WS=6, OPEN=7, TEXT=8, CLOSE=9, 
		OPENME=10, CLOSEME=11, EQUALS=12, STRING=13, Name=14, S=15;
	public static string[] channelNames = {
		"DEFAULT_TOKEN_CHANNEL", "HIDDEN"
	};

	public static string[] modeNames = {
		"DEFAULT_MODE"
	};

	public static readonly string[] ruleNames = {
		"T__0", "T__1", "T__2", "T__3", "COMMENT", "SEA_WS", "OPEN", "TEXT", "CLOSE", 
		"OPENME", "CLOSEME", "EQUALS", "STRING", "Name", "S", "DIGIT", "NameChar", 
		"NameStartChar"
	};


	public XamlGrammarLexer(ICharStream input)
	: this(input, Console.Out, Console.Error) { }

	public XamlGrammarLexer(ICharStream input, TextWriter output, TextWriter errorOutput)
	: base(input, output, errorOutput)
	{
		Interpreter = new LexerATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	private static readonly string[] _LiteralNames = {
		null, "'<'", "'/'", "'/>'", "'\"'", null, null, null, null, "'>'", null, 
		"'}'", "'='"
	};
	private static readonly string[] _SymbolicNames = {
		null, null, null, null, null, "COMMENT", "SEA_WS", "OPEN", "TEXT", "CLOSE", 
		"OPENME", "CLOSEME", "EQUALS", "STRING", "Name", "S"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "LexBasic.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string[] ChannelNames { get { return channelNames; } }

	public override string[] ModeNames { get { return modeNames; } }

	public override string SerializedAtn { get { return new string(_serializedATN); } }

	static XamlGrammarLexer() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}
	private static char[] _serializedATN = {
		'\x3', '\x608B', '\xA72A', '\x8133', '\xB9ED', '\x417C', '\x3BE7', '\x7786', 
		'\x5964', '\x2', '\x11', '\x7F', '\b', '\x1', '\x4', '\x2', '\t', '\x2', 
		'\x4', '\x3', '\t', '\x3', '\x4', '\x4', '\t', '\x4', '\x4', '\x5', '\t', 
		'\x5', '\x4', '\x6', '\t', '\x6', '\x4', '\a', '\t', '\a', '\x4', '\b', 
		'\t', '\b', '\x4', '\t', '\t', '\t', '\x4', '\n', '\t', '\n', '\x4', '\v', 
		'\t', '\v', '\x4', '\f', '\t', '\f', '\x4', '\r', '\t', '\r', '\x4', '\xE', 
		'\t', '\xE', '\x4', '\xF', '\t', '\xF', '\x4', '\x10', '\t', '\x10', '\x4', 
		'\x11', '\t', '\x11', '\x4', '\x12', '\t', '\x12', '\x4', '\x13', '\t', 
		'\x13', '\x3', '\x2', '\x3', '\x2', '\x3', '\x3', '\x3', '\x3', '\x3', 
		'\x4', '\x3', '\x4', '\x3', '\x4', '\x3', '\x5', '\x3', '\x5', '\x3', 
		'\x6', '\x3', '\x6', '\x3', '\x6', '\x3', '\x6', '\x3', '\x6', '\x3', 
		'\x6', '\a', '\x6', '\x37', '\n', '\x6', '\f', '\x6', '\xE', '\x6', ':', 
		'\v', '\x6', '\x3', '\x6', '\x3', '\x6', '\x3', '\x6', '\x3', '\x6', '\x3', 
		'\a', '\x3', '\a', '\x5', '\a', '\x42', '\n', '\a', '\x3', '\a', '\x6', 
		'\a', '\x45', '\n', '\a', '\r', '\a', '\xE', '\a', '\x46', '\x3', '\b', 
		'\x3', '\b', '\x3', '\t', '\x6', '\t', 'L', '\n', '\t', '\r', '\t', '\xE', 
		'\t', 'M', '\x3', '\n', '\x3', '\n', '\x3', '\v', '\x3', '\v', '\x3', 
		'\f', '\x3', '\f', '\x3', '\r', '\x3', '\r', '\x3', '\xE', '\x3', '\xE', 
		'\a', '\xE', 'Z', '\n', '\xE', '\f', '\xE', '\xE', '\xE', ']', '\v', '\xE', 
		'\x3', '\xE', '\x3', '\xE', '\x3', '\xE', '\a', '\xE', '\x62', '\n', '\xE', 
		'\f', '\xE', '\xE', '\xE', '\x65', '\v', '\xE', '\x3', '\xE', '\x5', '\xE', 
		'h', '\n', '\xE', '\x3', '\xF', '\x3', '\xF', '\a', '\xF', 'l', '\n', 
		'\xF', '\f', '\xF', '\xE', '\xF', 'o', '\v', '\xF', '\x3', '\x10', '\x3', 
		'\x10', '\x3', '\x10', '\x3', '\x10', '\x3', '\x11', '\x3', '\x11', '\x3', 
		'\x12', '\x3', '\x12', '\x3', '\x12', '\x3', '\x12', '\x5', '\x12', '{', 
		'\n', '\x12', '\x3', '\x13', '\x5', '\x13', '~', '\n', '\x13', '\x3', 
		'\x38', '\x2', '\x14', '\x3', '\x3', '\x5', '\x4', '\a', '\x5', '\t', 
		'\x6', '\v', '\a', '\r', '\b', '\xF', '\t', '\x11', '\n', '\x13', '\v', 
		'\x15', '\f', '\x17', '\r', '\x19', '\xE', '\x1B', '\xF', '\x1D', '\x10', 
		'\x1F', '\x11', '!', '\x2', '#', '\x2', '%', '\x2', '\x3', '\x2', '\v', 
		'\x4', '\x2', '\v', '\v', '\"', '\"', '\x4', '\x2', '(', '(', '>', '>', 
		'\x4', '\x2', '$', '$', '>', '>', '\x4', '\x2', ')', ')', '>', '>', '\x5', 
		'\x2', '\v', '\f', '\xF', '\xF', '\"', '\"', '\x3', '\x2', '\x32', ';', 
		'\x4', '\x2', '/', '\x30', '\x61', '\x61', '\x5', '\x2', '\xB9', '\xB9', 
		'\x302', '\x371', '\x2041', '\x2042', '\n', '\x2', '<', '<', '\x43', '\\', 
		'\x63', '|', '\x2072', '\x2191', '\x2C02', '\x2FF1', '\x3003', '\xD801', 
		'\xF902', '\xFDD1', '\xFDF2', '\xFFFF', '\x2', '\x87', '\x2', '\x3', '\x3', 
		'\x2', '\x2', '\x2', '\x2', '\x5', '\x3', '\x2', '\x2', '\x2', '\x2', 
		'\a', '\x3', '\x2', '\x2', '\x2', '\x2', '\t', '\x3', '\x2', '\x2', '\x2', 
		'\x2', '\v', '\x3', '\x2', '\x2', '\x2', '\x2', '\r', '\x3', '\x2', '\x2', 
		'\x2', '\x2', '\xF', '\x3', '\x2', '\x2', '\x2', '\x2', '\x11', '\x3', 
		'\x2', '\x2', '\x2', '\x2', '\x13', '\x3', '\x2', '\x2', '\x2', '\x2', 
		'\x15', '\x3', '\x2', '\x2', '\x2', '\x2', '\x17', '\x3', '\x2', '\x2', 
		'\x2', '\x2', '\x19', '\x3', '\x2', '\x2', '\x2', '\x2', '\x1B', '\x3', 
		'\x2', '\x2', '\x2', '\x2', '\x1D', '\x3', '\x2', '\x2', '\x2', '\x2', 
		'\x1F', '\x3', '\x2', '\x2', '\x2', '\x3', '\'', '\x3', '\x2', '\x2', 
		'\x2', '\x5', ')', '\x3', '\x2', '\x2', '\x2', '\a', '+', '\x3', '\x2', 
		'\x2', '\x2', '\t', '.', '\x3', '\x2', '\x2', '\x2', '\v', '\x30', '\x3', 
		'\x2', '\x2', '\x2', '\r', '\x44', '\x3', '\x2', '\x2', '\x2', '\xF', 
		'H', '\x3', '\x2', '\x2', '\x2', '\x11', 'K', '\x3', '\x2', '\x2', '\x2', 
		'\x13', 'O', '\x3', '\x2', '\x2', '\x2', '\x15', 'Q', '\x3', '\x2', '\x2', 
		'\x2', '\x17', 'S', '\x3', '\x2', '\x2', '\x2', '\x19', 'U', '\x3', '\x2', 
		'\x2', '\x2', '\x1B', 'g', '\x3', '\x2', '\x2', '\x2', '\x1D', 'i', '\x3', 
		'\x2', '\x2', '\x2', '\x1F', 'p', '\x3', '\x2', '\x2', '\x2', '!', 't', 
		'\x3', '\x2', '\x2', '\x2', '#', 'z', '\x3', '\x2', '\x2', '\x2', '%', 
		'}', '\x3', '\x2', '\x2', '\x2', '\'', '(', '\a', '>', '\x2', '\x2', '(', 
		'\x4', '\x3', '\x2', '\x2', '\x2', ')', '*', '\a', '\x31', '\x2', '\x2', 
		'*', '\x6', '\x3', '\x2', '\x2', '\x2', '+', ',', '\a', '\x31', '\x2', 
		'\x2', ',', '-', '\a', '@', '\x2', '\x2', '-', '\b', '\x3', '\x2', '\x2', 
		'\x2', '.', '/', '\a', '$', '\x2', '\x2', '/', '\n', '\x3', '\x2', '\x2', 
		'\x2', '\x30', '\x31', '\a', '>', '\x2', '\x2', '\x31', '\x32', '\a', 
		'#', '\x2', '\x2', '\x32', '\x33', '\a', '/', '\x2', '\x2', '\x33', '\x34', 
		'\a', '/', '\x2', '\x2', '\x34', '\x38', '\x3', '\x2', '\x2', '\x2', '\x35', 
		'\x37', '\v', '\x2', '\x2', '\x2', '\x36', '\x35', '\x3', '\x2', '\x2', 
		'\x2', '\x37', ':', '\x3', '\x2', '\x2', '\x2', '\x38', '\x39', '\x3', 
		'\x2', '\x2', '\x2', '\x38', '\x36', '\x3', '\x2', '\x2', '\x2', '\x39', 
		';', '\x3', '\x2', '\x2', '\x2', ':', '\x38', '\x3', '\x2', '\x2', '\x2', 
		';', '<', '\a', '/', '\x2', '\x2', '<', '=', '\a', '/', '\x2', '\x2', 
		'=', '>', '\a', '@', '\x2', '\x2', '>', '\f', '\x3', '\x2', '\x2', '\x2', 
		'?', '\x45', '\t', '\x2', '\x2', '\x2', '@', '\x42', '\a', '\xF', '\x2', 
		'\x2', '\x41', '@', '\x3', '\x2', '\x2', '\x2', '\x41', '\x42', '\x3', 
		'\x2', '\x2', '\x2', '\x42', '\x43', '\x3', '\x2', '\x2', '\x2', '\x43', 
		'\x45', '\a', '\f', '\x2', '\x2', '\x44', '?', '\x3', '\x2', '\x2', '\x2', 
		'\x44', '\x41', '\x3', '\x2', '\x2', '\x2', '\x45', '\x46', '\x3', '\x2', 
		'\x2', '\x2', '\x46', '\x44', '\x3', '\x2', '\x2', '\x2', '\x46', 'G', 
		'\x3', '\x2', '\x2', '\x2', 'G', '\xE', '\x3', '\x2', '\x2', '\x2', 'H', 
		'I', '\a', '}', '\x2', '\x2', 'I', '\x10', '\x3', '\x2', '\x2', '\x2', 
		'J', 'L', '\n', '\x3', '\x2', '\x2', 'K', 'J', '\x3', '\x2', '\x2', '\x2', 
		'L', 'M', '\x3', '\x2', '\x2', '\x2', 'M', 'K', '\x3', '\x2', '\x2', '\x2', 
		'M', 'N', '\x3', '\x2', '\x2', '\x2', 'N', '\x12', '\x3', '\x2', '\x2', 
		'\x2', 'O', 'P', '\a', '@', '\x2', '\x2', 'P', '\x14', '\x3', '\x2', '\x2', 
		'\x2', 'Q', 'R', '\a', '}', '\x2', '\x2', 'R', '\x16', '\x3', '\x2', '\x2', 
		'\x2', 'S', 'T', '\a', '\x7F', '\x2', '\x2', 'T', '\x18', '\x3', '\x2', 
		'\x2', '\x2', 'U', 'V', '\a', '?', '\x2', '\x2', 'V', '\x1A', '\x3', '\x2', 
		'\x2', '\x2', 'W', '[', '\a', '$', '\x2', '\x2', 'X', 'Z', '\n', '\x4', 
		'\x2', '\x2', 'Y', 'X', '\x3', '\x2', '\x2', '\x2', 'Z', ']', '\x3', '\x2', 
		'\x2', '\x2', '[', 'Y', '\x3', '\x2', '\x2', '\x2', '[', '\\', '\x3', 
		'\x2', '\x2', '\x2', '\\', '^', '\x3', '\x2', '\x2', '\x2', ']', '[', 
		'\x3', '\x2', '\x2', '\x2', '^', 'h', '\a', '$', '\x2', '\x2', '_', '\x63', 
		'\a', ')', '\x2', '\x2', '`', '\x62', '\n', '\x5', '\x2', '\x2', '\x61', 
		'`', '\x3', '\x2', '\x2', '\x2', '\x62', '\x65', '\x3', '\x2', '\x2', 
		'\x2', '\x63', '\x61', '\x3', '\x2', '\x2', '\x2', '\x63', '\x64', '\x3', 
		'\x2', '\x2', '\x2', '\x64', '\x66', '\x3', '\x2', '\x2', '\x2', '\x65', 
		'\x63', '\x3', '\x2', '\x2', '\x2', '\x66', 'h', '\a', ')', '\x2', '\x2', 
		'g', 'W', '\x3', '\x2', '\x2', '\x2', 'g', '_', '\x3', '\x2', '\x2', '\x2', 
		'h', '\x1C', '\x3', '\x2', '\x2', '\x2', 'i', 'm', '\x5', '%', '\x13', 
		'\x2', 'j', 'l', '\x5', '#', '\x12', '\x2', 'k', 'j', '\x3', '\x2', '\x2', 
		'\x2', 'l', 'o', '\x3', '\x2', '\x2', '\x2', 'm', 'k', '\x3', '\x2', '\x2', 
		'\x2', 'm', 'n', '\x3', '\x2', '\x2', '\x2', 'n', '\x1E', '\x3', '\x2', 
		'\x2', '\x2', 'o', 'm', '\x3', '\x2', '\x2', '\x2', 'p', 'q', '\t', '\x6', 
		'\x2', '\x2', 'q', 'r', '\x3', '\x2', '\x2', '\x2', 'r', 's', '\b', '\x10', 
		'\x2', '\x2', 's', ' ', '\x3', '\x2', '\x2', '\x2', 't', 'u', '\t', '\a', 
		'\x2', '\x2', 'u', '\"', '\x3', '\x2', '\x2', '\x2', 'v', '{', '\x5', 
		'%', '\x13', '\x2', 'w', '{', '\t', '\b', '\x2', '\x2', 'x', '{', '\x5', 
		'!', '\x11', '\x2', 'y', '{', '\t', '\t', '\x2', '\x2', 'z', 'v', '\x3', 
		'\x2', '\x2', '\x2', 'z', 'w', '\x3', '\x2', '\x2', '\x2', 'z', 'x', '\x3', 
		'\x2', '\x2', '\x2', 'z', 'y', '\x3', '\x2', '\x2', '\x2', '{', '$', '\x3', 
		'\x2', '\x2', '\x2', '|', '~', '\t', '\n', '\x2', '\x2', '}', '|', '\x3', 
		'\x2', '\x2', '\x2', '~', '&', '\x3', '\x2', '\x2', '\x2', '\xE', '\x2', 
		'\x38', '\x41', '\x44', '\x46', 'M', '[', '\x63', 'g', 'm', 'z', '}', 
		'\x3', '\b', '\x2', '\x2',
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
