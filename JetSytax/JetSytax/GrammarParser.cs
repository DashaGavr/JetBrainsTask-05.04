//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.8
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from Grammar.g4 by ANTLR 4.8

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.8")]
[System.CLSCompliant(false)]
public partial class GrammarParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		T__0=1, T__1=2, T__2=3, T__3=4, COMMENT=5, SEA_WS=6, OPEN=7, TEXT=8, CLOSE=9, 
		FIGO=10, FIGCL=11, EQUALS=12, STRING=13, Name=14, S=15;
	public const int
		RULE_prog = 0, RULE_content = 1, RULE_element = 2, RULE_attribute = 3, 
		RULE_chardata = 4;
	public static readonly string[] ruleNames = {
		"prog", "content", "element", "attribute", "chardata"
	};

	private static readonly string[] _LiteralNames = {
		null, "'<'", "'/'", "'/>'", "'\"'", null, null, null, null, "'>'", null, 
		"'}'", "'='"
	};
	private static readonly string[] _SymbolicNames = {
		null, null, null, null, null, "COMMENT", "SEA_WS", "OPEN", "TEXT", "CLOSE", 
		"FIGO", "FIGCL", "EQUALS", "STRING", "Name", "S"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "Grammar.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string SerializedAtn { get { return new string(_serializedATN); } }

	static GrammarParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public GrammarParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public GrammarParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	public partial class ProgContext : ParserRuleContext {
		public ElementContext element() {
			return GetRuleContext<ElementContext>(0);
		}
		public ProgContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_prog; } }
		public override void EnterRule(IParseTreeListener listener) {
			IGrammarListener typedListener = listener as IGrammarListener;
			if (typedListener != null) typedListener.EnterProg(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IGrammarListener typedListener = listener as IGrammarListener;
			if (typedListener != null) typedListener.ExitProg(this);
		}
	}

	[RuleVersion(0)]
	public ProgContext prog() {
		ProgContext _localctx = new ProgContext(Context, State);
		EnterRule(_localctx, 0, RULE_prog);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 10; element();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ContentContext : ParserRuleContext {
		public ChardataContext[] chardata() {
			return GetRuleContexts<ChardataContext>();
		}
		public ChardataContext chardata(int i) {
			return GetRuleContext<ChardataContext>(i);
		}
		public ElementContext[] element() {
			return GetRuleContexts<ElementContext>();
		}
		public ElementContext element(int i) {
			return GetRuleContext<ElementContext>(i);
		}
		public ITerminalNode[] COMMENT() { return GetTokens(GrammarParser.COMMENT); }
		public ITerminalNode COMMENT(int i) {
			return GetToken(GrammarParser.COMMENT, i);
		}
		public ContentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_content; } }
		public override void EnterRule(IParseTreeListener listener) {
			IGrammarListener typedListener = listener as IGrammarListener;
			if (typedListener != null) typedListener.EnterContent(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IGrammarListener typedListener = listener as IGrammarListener;
			if (typedListener != null) typedListener.ExitContent(this);
		}
	}

	[RuleVersion(0)]
	public ContentContext content() {
		ContentContext _localctx = new ContentContext(Context, State);
		EnterRule(_localctx, 2, RULE_content);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 13;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==SEA_WS || _la==TEXT) {
				{
				State = 12; chardata();
				}
			}

			State = 24;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,3,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 17;
					ErrorHandler.Sync(this);
					switch (TokenStream.LA(1)) {
					case T__0:
						{
						State = 15; element();
						}
						break;
					case COMMENT:
						{
						State = 16; Match(COMMENT);
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					State = 20;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if (_la==SEA_WS || _la==TEXT) {
						{
						State = 19; chardata();
						}
					}

					}
					} 
				}
				State = 26;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,3,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ElementContext : ParserRuleContext {
		public ITerminalNode[] Name() { return GetTokens(GrammarParser.Name); }
		public ITerminalNode Name(int i) {
			return GetToken(GrammarParser.Name, i);
		}
		public ITerminalNode[] CLOSE() { return GetTokens(GrammarParser.CLOSE); }
		public ITerminalNode CLOSE(int i) {
			return GetToken(GrammarParser.CLOSE, i);
		}
		public ContentContext content() {
			return GetRuleContext<ContentContext>(0);
		}
		public AttributeContext[] attribute() {
			return GetRuleContexts<AttributeContext>();
		}
		public AttributeContext attribute(int i) {
			return GetRuleContext<AttributeContext>(i);
		}
		public ITerminalNode[] S() { return GetTokens(GrammarParser.S); }
		public ITerminalNode S(int i) {
			return GetToken(GrammarParser.S, i);
		}
		public ElementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_element; } }
		public override void EnterRule(IParseTreeListener listener) {
			IGrammarListener typedListener = listener as IGrammarListener;
			if (typedListener != null) typedListener.EnterElement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IGrammarListener typedListener = listener as IGrammarListener;
			if (typedListener != null) typedListener.ExitElement(this);
		}
	}

	[RuleVersion(0)]
	public ElementContext element() {
		ElementContext _localctx = new ElementContext(Context, State);
		EnterRule(_localctx, 4, RULE_element);
		int _la;
		try {
			State = 55;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,7,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 27; Match(T__0);
				State = 28; Match(Name);
				State = 32;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==Name) {
					{
					{
					State = 29; attribute();
					}
					}
					State = 34;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 35; Match(CLOSE);
				State = 36; content();
				State = 37; Match(T__0);
				State = 38; Match(T__1);
				State = 39; Match(Name);
				State = 40; Match(CLOSE);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 42; Match(T__0);
				State = 43; Match(Name);
				State = 44; Match(S);
				State = 48;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==Name) {
					{
					{
					State = 45; attribute();
					}
					}
					State = 50;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 52;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==S) {
					{
					State = 51; Match(S);
					}
				}

				State = 54; Match(T__2);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AttributeContext : ParserRuleContext {
		public ITerminalNode[] Name() { return GetTokens(GrammarParser.Name); }
		public ITerminalNode Name(int i) {
			return GetToken(GrammarParser.Name, i);
		}
		public ITerminalNode[] EQUALS() { return GetTokens(GrammarParser.EQUALS); }
		public ITerminalNode EQUALS(int i) {
			return GetToken(GrammarParser.EQUALS, i);
		}
		public ITerminalNode STRING() { return GetToken(GrammarParser.STRING, 0); }
		public ITerminalNode FIGO() { return GetToken(GrammarParser.FIGO, 0); }
		public ITerminalNode FIGCL() { return GetToken(GrammarParser.FIGCL, 0); }
		public AttributeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_attribute; } }
		public override void EnterRule(IParseTreeListener listener) {
			IGrammarListener typedListener = listener as IGrammarListener;
			if (typedListener != null) typedListener.EnterAttribute(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IGrammarListener typedListener = listener as IGrammarListener;
			if (typedListener != null) typedListener.ExitAttribute(this);
		}
	}

	[RuleVersion(0)]
	public AttributeContext attribute() {
		AttributeContext _localctx = new AttributeContext(Context, State);
		EnterRule(_localctx, 6, RULE_attribute);
		try {
			State = 69;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,8,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 57; Match(Name);
				State = 58; Match(EQUALS);
				State = 59; Match(T__3);
				State = 60; Match(STRING);
				State = 61; Match(T__3);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 62; Match(Name);
				State = 63; Match(EQUALS);
				State = 64; Match(FIGO);
				State = 65; Match(Name);
				State = 66; Match(EQUALS);
				State = 67; Match(STRING);
				State = 68; Match(FIGCL);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ChardataContext : ParserRuleContext {
		public ITerminalNode TEXT() { return GetToken(GrammarParser.TEXT, 0); }
		public ITerminalNode SEA_WS() { return GetToken(GrammarParser.SEA_WS, 0); }
		public ChardataContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_chardata; } }
		public override void EnterRule(IParseTreeListener listener) {
			IGrammarListener typedListener = listener as IGrammarListener;
			if (typedListener != null) typedListener.EnterChardata(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IGrammarListener typedListener = listener as IGrammarListener;
			if (typedListener != null) typedListener.ExitChardata(this);
		}
	}

	[RuleVersion(0)]
	public ChardataContext chardata() {
		ChardataContext _localctx = new ChardataContext(Context, State);
		EnterRule(_localctx, 8, RULE_chardata);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 71;
			_la = TokenStream.LA(1);
			if ( !(_la==SEA_WS || _la==TEXT) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	private static char[] _serializedATN = {
		'\x3', '\x608B', '\xA72A', '\x8133', '\xB9ED', '\x417C', '\x3BE7', '\x7786', 
		'\x5964', '\x3', '\x11', 'L', '\x4', '\x2', '\t', '\x2', '\x4', '\x3', 
		'\t', '\x3', '\x4', '\x4', '\t', '\x4', '\x4', '\x5', '\t', '\x5', '\x4', 
		'\x6', '\t', '\x6', '\x3', '\x2', '\x3', '\x2', '\x3', '\x3', '\x5', '\x3', 
		'\x10', '\n', '\x3', '\x3', '\x3', '\x3', '\x3', '\x5', '\x3', '\x14', 
		'\n', '\x3', '\x3', '\x3', '\x5', '\x3', '\x17', '\n', '\x3', '\a', '\x3', 
		'\x19', '\n', '\x3', '\f', '\x3', '\xE', '\x3', '\x1C', '\v', '\x3', '\x3', 
		'\x4', '\x3', '\x4', '\x3', '\x4', '\a', '\x4', '!', '\n', '\x4', '\f', 
		'\x4', '\xE', '\x4', '$', '\v', '\x4', '\x3', '\x4', '\x3', '\x4', '\x3', 
		'\x4', '\x3', '\x4', '\x3', '\x4', '\x3', '\x4', '\x3', '\x4', '\x3', 
		'\x4', '\x3', '\x4', '\x3', '\x4', '\x3', '\x4', '\a', '\x4', '\x31', 
		'\n', '\x4', '\f', '\x4', '\xE', '\x4', '\x34', '\v', '\x4', '\x3', '\x4', 
		'\x5', '\x4', '\x37', '\n', '\x4', '\x3', '\x4', '\x5', '\x4', ':', '\n', 
		'\x4', '\x3', '\x5', '\x3', '\x5', '\x3', '\x5', '\x3', '\x5', '\x3', 
		'\x5', '\x3', '\x5', '\x3', '\x5', '\x3', '\x5', '\x3', '\x5', '\x3', 
		'\x5', '\x3', '\x5', '\x3', '\x5', '\x5', '\x5', 'H', '\n', '\x5', '\x3', 
		'\x6', '\x3', '\x6', '\x3', '\x6', '\x2', '\x2', '\a', '\x2', '\x4', '\x6', 
		'\b', '\n', '\x2', '\x3', '\x4', '\x2', '\b', '\b', '\n', '\n', '\x2', 
		'O', '\x2', '\f', '\x3', '\x2', '\x2', '\x2', '\x4', '\xF', '\x3', '\x2', 
		'\x2', '\x2', '\x6', '\x39', '\x3', '\x2', '\x2', '\x2', '\b', 'G', '\x3', 
		'\x2', '\x2', '\x2', '\n', 'I', '\x3', '\x2', '\x2', '\x2', '\f', '\r', 
		'\x5', '\x6', '\x4', '\x2', '\r', '\x3', '\x3', '\x2', '\x2', '\x2', '\xE', 
		'\x10', '\x5', '\n', '\x6', '\x2', '\xF', '\xE', '\x3', '\x2', '\x2', 
		'\x2', '\xF', '\x10', '\x3', '\x2', '\x2', '\x2', '\x10', '\x1A', '\x3', 
		'\x2', '\x2', '\x2', '\x11', '\x14', '\x5', '\x6', '\x4', '\x2', '\x12', 
		'\x14', '\a', '\a', '\x2', '\x2', '\x13', '\x11', '\x3', '\x2', '\x2', 
		'\x2', '\x13', '\x12', '\x3', '\x2', '\x2', '\x2', '\x14', '\x16', '\x3', 
		'\x2', '\x2', '\x2', '\x15', '\x17', '\x5', '\n', '\x6', '\x2', '\x16', 
		'\x15', '\x3', '\x2', '\x2', '\x2', '\x16', '\x17', '\x3', '\x2', '\x2', 
		'\x2', '\x17', '\x19', '\x3', '\x2', '\x2', '\x2', '\x18', '\x13', '\x3', 
		'\x2', '\x2', '\x2', '\x19', '\x1C', '\x3', '\x2', '\x2', '\x2', '\x1A', 
		'\x18', '\x3', '\x2', '\x2', '\x2', '\x1A', '\x1B', '\x3', '\x2', '\x2', 
		'\x2', '\x1B', '\x5', '\x3', '\x2', '\x2', '\x2', '\x1C', '\x1A', '\x3', 
		'\x2', '\x2', '\x2', '\x1D', '\x1E', '\a', '\x3', '\x2', '\x2', '\x1E', 
		'\"', '\a', '\x10', '\x2', '\x2', '\x1F', '!', '\x5', '\b', '\x5', '\x2', 
		' ', '\x1F', '\x3', '\x2', '\x2', '\x2', '!', '$', '\x3', '\x2', '\x2', 
		'\x2', '\"', ' ', '\x3', '\x2', '\x2', '\x2', '\"', '#', '\x3', '\x2', 
		'\x2', '\x2', '#', '%', '\x3', '\x2', '\x2', '\x2', '$', '\"', '\x3', 
		'\x2', '\x2', '\x2', '%', '&', '\a', '\v', '\x2', '\x2', '&', '\'', '\x5', 
		'\x4', '\x3', '\x2', '\'', '(', '\a', '\x3', '\x2', '\x2', '(', ')', '\a', 
		'\x4', '\x2', '\x2', ')', '*', '\a', '\x10', '\x2', '\x2', '*', '+', '\a', 
		'\v', '\x2', '\x2', '+', ':', '\x3', '\x2', '\x2', '\x2', ',', '-', '\a', 
		'\x3', '\x2', '\x2', '-', '.', '\a', '\x10', '\x2', '\x2', '.', '\x32', 
		'\a', '\x11', '\x2', '\x2', '/', '\x31', '\x5', '\b', '\x5', '\x2', '\x30', 
		'/', '\x3', '\x2', '\x2', '\x2', '\x31', '\x34', '\x3', '\x2', '\x2', 
		'\x2', '\x32', '\x30', '\x3', '\x2', '\x2', '\x2', '\x32', '\x33', '\x3', 
		'\x2', '\x2', '\x2', '\x33', '\x36', '\x3', '\x2', '\x2', '\x2', '\x34', 
		'\x32', '\x3', '\x2', '\x2', '\x2', '\x35', '\x37', '\a', '\x11', '\x2', 
		'\x2', '\x36', '\x35', '\x3', '\x2', '\x2', '\x2', '\x36', '\x37', '\x3', 
		'\x2', '\x2', '\x2', '\x37', '\x38', '\x3', '\x2', '\x2', '\x2', '\x38', 
		':', '\a', '\x5', '\x2', '\x2', '\x39', '\x1D', '\x3', '\x2', '\x2', '\x2', 
		'\x39', ',', '\x3', '\x2', '\x2', '\x2', ':', '\a', '\x3', '\x2', '\x2', 
		'\x2', ';', '<', '\a', '\x10', '\x2', '\x2', '<', '=', '\a', '\xE', '\x2', 
		'\x2', '=', '>', '\a', '\x6', '\x2', '\x2', '>', '?', '\a', '\xF', '\x2', 
		'\x2', '?', 'H', '\a', '\x6', '\x2', '\x2', '@', '\x41', '\a', '\x10', 
		'\x2', '\x2', '\x41', '\x42', '\a', '\xE', '\x2', '\x2', '\x42', '\x43', 
		'\a', '\f', '\x2', '\x2', '\x43', '\x44', '\a', '\x10', '\x2', '\x2', 
		'\x44', '\x45', '\a', '\xE', '\x2', '\x2', '\x45', '\x46', '\a', '\xF', 
		'\x2', '\x2', '\x46', 'H', '\a', '\r', '\x2', '\x2', 'G', ';', '\x3', 
		'\x2', '\x2', '\x2', 'G', '@', '\x3', '\x2', '\x2', '\x2', 'H', '\t', 
		'\x3', '\x2', '\x2', '\x2', 'I', 'J', '\t', '\x2', '\x2', '\x2', 'J', 
		'\v', '\x3', '\x2', '\x2', '\x2', '\v', '\xF', '\x13', '\x16', '\x1A', 
		'\"', '\x32', '\x36', '\x39', 'G',
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
